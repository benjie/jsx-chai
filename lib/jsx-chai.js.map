{"version":3,"sources":["jsx-chai.js"],"names":[],"mappings":";;;;;kBAGwB,OAAO;;;;;;;;;;AAAhB,SAAS,OAAO,cAA+B;MAA7B,SAAS,QAAT,SAAS;MAAI,IAAI,SAAJ,IAAI;MAAE,OAAO,SAAP,OAAO;;AAEzD,WAAS,CAAC,WAAW,CAAC,KAAK,EAAE,YAAW;AACtC,QAAI,CAAC,MAAM,CACT,0BAPE,SAAS,EAOD,IAAI,CAAC,IAAI,CAAC,EACpB,sCAAsC,EACtC,0CAA0C,CAC3C,CAAA;GACF,CAAC,CAAA;;AAEF,WAAS,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE;AAClC,WAAO,UAAS,MAAM,EAAE;AACtB,aAAO,UAAS,GAAG,EAAE;AACnB,YAAI,CAAC,0BAhBL,SAAS,EAgBM,GAAG,CAAC,EAAE;AACnB,iBAAO,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;SACrC;;AAED,YAAM,QAAQ,GAAG,uCAAwB,GAAG,CAAC,CAAA;AAC7C,YAAM,MAAM,GAAG,uCAAwB,IAAI,CAAC,IAAI,CAAC,CAAA;;AAEjD,eAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAC,GAAG,EAAH,GAAG,EAAE,QAAQ,EAAR,QAAQ,EAAE,MAAM,EAAN,MAAM,EAAC,CAAC,CAAA;OAChD,CAAA;KACF,CAAA;GACF;;AAED,WAAS,MAAM,QAAqB;QAAnB,QAAQ,SAAR,QAAQ;QAAE,MAAM,SAAN,MAAM;;AAC/B,QAAI,CAAC,MAAM,CACT,MAAM,KAAK,QAAQ,EACnB,iCAAiC,EACjC,qCAAqC,EACrC,QAAQ,EACR,MAAM,EACN,IAAI,CACL,CAAA;GACF;;AAED,WAAS,UAAU,QAAqB;QAAnB,QAAQ,SAAR,QAAQ;QAAE,MAAM,SAAN,MAAM;;AACnC,QAAI,CAAC,MAAM,CACT,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,kCACK,OAAO,CAAC,QAAQ,CAAC,sCACb,OAAO,CAAC,QAAQ,CAAC,EACnD,QAAQ,EACR,MAAM,CACP,CAAA;GACF;;AAED,WAAS,gBAAgB,CAAC,IAAI,EAAE;AAC9B,aAAS,CAAC,wBAAwB,CAChC,IAAI,EACJ,SAAS,CAAC,UAAU,CAAC,EACrB,UAAS,MAAM,EAAE;AACf,aAAO,YAAW;AAChB,eAAO,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;OACrC,CAAA;KACF,CACF,CAAA;GACF;;AAED,WAAS,CAAC,eAAe,CAAC,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;AACnD,WAAS,CAAC,eAAe,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;;AAEpD,kBAAgB,CAAC,SAAS,CAAC,CAAA;AAC3B,kBAAgB,CAAC,SAAS,CAAC,CAAA;AAC3B,kBAAgB,CAAC,UAAU,CAAC,CAAA;AAC5B,kBAAgB,CAAC,UAAU,CAAC,CAAA;CAE7B","file":"jsx-chai.js","sourcesContent":["import {isElement} from 'react-addons-test-utils';\nimport reactElementToJSXString from 'react-element-to-jsx-string'\n\nexport default function jsxChai({Assertion}, {flag, inspect}) {\n\n  Assertion.addProperty('jsx', function() {\n    this.assert(\n      isElement(this._obj),\n      'expected #{this} to be a JSX element',\n      'expected #{this} not to be a JSX element'\n    )\n  })\n\n  function jsxMethod(func, checkDeep) {\n    return function(_super) {\n      return function(jsx) {\n        if (!isElement(jsx)) {\n          return _super.apply(this, arguments)\n        }\n\n        const expected = reactElementToJSXString(jsx)\n        const actual = reactElementToJSXString(this._obj)\n\n        return func.call(this, {jsx, expected, actual})\n      }\n    }\n  }\n\n  function jsxEql({expected, actual}) {\n    this.assert(\n      actual === expected,\n      'expected #{act} to equal #{exp}',\n      'expected #{act} to not equal #{exp}',\n      expected,\n      actual,\n      true\n    )\n  }\n\n  function jsxInclude({expected, actual}) {\n    this.assert(\n      ~actual.indexOf(expected),\n      `expected #{act} to contain ${inspect(expected)}`,\n      `expected #{act} to not contain ${inspect(expected)}`,\n      expected,\n      actual\n    )\n  }\n\n  function overwriteInclude(name) {\n    Assertion.overwriteChainableMethod(\n      name,\n      jsxMethod(jsxInclude),\n      function(_super) {\n        return function() {\n          return _super.apply(this, arguments)\n        }\n      }\n    )\n  }\n\n  Assertion.overwriteMethod('eql', jsxMethod(jsxEql))\n  Assertion.overwriteMethod('eqls', jsxMethod(jsxEql))\n\n  overwriteInclude('include')\n  overwriteInclude('contain')\n  overwriteInclude('includes')\n  overwriteInclude('contains')\n\n}\n"],"sourceRoot":"/source/"}